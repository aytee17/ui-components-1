// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Record /> should render a Record and no Tooltip with only a custom tooltip 1`] = `
.c2 {
  font-size: 14px;
  line-height: 20px;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  color: #424F5C;
  font-weight: 400;
}

.c1 {
  margin-bottom: 4px;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column-reverse;
  -ms-flex-direction: column-reverse;
  flex-direction: column-reverse;
}

<Record
  name="Position Title"
  noChildrenText="Not Provided"
  tooltipProps={
    Object {
      "toggleComponent": [Function],
    }
  }
  variant="labelAbove"
>
  <styled.div
    data-component-type="record"
    variant="labelAbove"
  >
    <StyledComponent
      data-component-type="record"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gqjmRU",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  display: flex;
  ",
              [Function],
              "
  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-gqjmRU",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      variant="labelAbove"
    >
      <div
        className="c0"
        data-component-type="record"
      >
        <div>
          <p
            key=".0"
          >
            Chief Executive Officer
          </p>
        </div>
        <styled.div
          data-component-type="record_name"
          hasTooltip={false}
          variant="labelAbove"
        >
          <StyledComponent
            data-component-type="record_name"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gZMcBi",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  .label-component {
    ",
                    [Function],
                    "
  }

  ",
                    [Function],
                    "
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gZMcBi",
                "target": "div",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            hasTooltip={false}
            variant="labelAbove"
          >
            <div
              className="c1"
              data-component-type="record_name"
            >
              <Text
                className="label-component"
                color="#424F5C"
                isInline={true}
                tag="span"
                type="small"
              >
                <styled.span
                  as="span"
                  className="label-component"
                  color="#424F5C"
                  data-component-type="text"
                  isInline={true}
                  textType="small"
                >
                  <StyledComponent
                    as="span"
                    className="label-component"
                    color="#424F5C"
                    data-component-type="text"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-dnqmqq",
                          "isStatic": false,
                          "lastClassName": "c2",
                          "rules": Array [
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "
",
                          ],
                        },
                        "displayName": "styled.span",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-dnqmqq",
                        "target": "span",
                        "toString": [Function],
                        "usesTheme": false,
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    isInline={true}
                    textType="small"
                  >
                    <span
                      className="c2 label-component"
                      color="#424F5C"
                      data-component-type="text"
                    >
                      Position Title
                    </span>
                  </StyledComponent>
                </styled.span>
              </Text>
            </div>
          </StyledComponent>
        </styled.div>
      </div>
    </StyledComponent>
  </styled.div>
</Record>
`;

exports[`<Record /> should render a Record and tooltip with a custom tooltip and tooltipContent 1`] = `
.c3 {
  cursor: help;
}

.c2 {
  font-size: 14px;
  line-height: 20px;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  color: #424F5C;
  font-weight: 400;
}

.c1 {
  margin-bottom: 4px;
}

.c1 .label-component {
  padding-right: .25rem;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column-reverse;
  -ms-flex-direction: column-reverse;
  flex-direction: column-reverse;
}

<Record
  name="Position Title"
  noChildrenText="Not Provided"
  tooltipContent="a"
  tooltipProps={
    Object {
      "toggleComponent": [Function],
    }
  }
  variant="labelAbove"
>
  <styled.div
    data-component-type="record"
    variant="labelAbove"
  >
    <StyledComponent
      data-component-type="record"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gqjmRU",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  display: flex;
  ",
              [Function],
              "
  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-gqjmRU",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      variant="labelAbove"
    >
      <div
        className="c0"
        data-component-type="record"
      >
        <div>
          <p
            key=".0"
          >
            Chief Executive Officer
          </p>
        </div>
        <styled.div
          data-component-type="record_name"
          hasTooltip={true}
          variant="labelAbove"
        >
          <StyledComponent
            data-component-type="record_name"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gZMcBi",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  .label-component {
    ",
                    [Function],
                    "
  }

  ",
                    [Function],
                    "
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gZMcBi",
                "target": "div",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            hasTooltip={true}
            variant="labelAbove"
          >
            <div
              className="c1"
              data-component-type="record_name"
            >
              <Text
                className="label-component"
                color="#424F5C"
                isInline={true}
                tag="span"
                type="small"
              >
                <styled.span
                  as="span"
                  className="label-component"
                  color="#424F5C"
                  data-component-type="text"
                  isInline={true}
                  textType="small"
                >
                  <StyledComponent
                    as="span"
                    className="label-component"
                    color="#424F5C"
                    data-component-type="text"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-dnqmqq",
                          "isStatic": false,
                          "lastClassName": "c2",
                          "rules": Array [
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "
",
                          ],
                        },
                        "displayName": "styled.span",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-dnqmqq",
                        "target": "span",
                        "toString": [Function],
                        "usesTheme": false,
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    isInline={true}
                    textType="small"
                  >
                    <span
                      className="c2 label-component"
                      color="#424F5C"
                      data-component-type="text"
                    >
                      Position Title
                    </span>
                  </StyledComponent>
                </styled.span>
              </Text>
              <TooltipPopover
                toggleComponent={[Function]}
                variant="neutral"
                width={300}
              >
                <styled.span>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-ifAKCX",
                          "isStatic": false,
                          "lastClassName": "c3",
                          "rules": Array [
                            "
  cursor: ",
                            [Function],
                            ";
",
                          ],
                        },
                        "displayName": "styled.span",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-ifAKCX",
                        "target": "span",
                        "toString": [Function],
                        "usesTheme": false,
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <span
                      className="c3"
                    >
                      <span
                        aria-expanded={false}
                        aria-haspopup={true}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        role="button"
                      />
                    </span>
                  </StyledComponent>
                </styled.span>
                <Popover
                  animationType="tooltip"
                  id=""
                  isOpen={false}
                  parentAnchorPosition="auto"
                  parentRef={
                    Object {
                      "current": <span
                        aria-expanded="false"
                        aria-haspopup="true"
                        role="button"
                      />,
                    }
                  }
                  popoverAnchorPosition="auto"
                >
                  <Portal
                    containerInfo={<body />}
                  >
                    <Transition
                      appear={false}
                      enter={true}
                      exit={true}
                      in={false}
                      mountOnEnter={true}
                      onEnter={[Function]}
                      onEntered={[Function]}
                      onEntering={[Function]}
                      onExit={[Function]}
                      onExited={[Function]}
                      onExiting={[Function]}
                      timeout={200}
                      unmountOnExit={true}
                    />
                  </Portal>
                </Popover>
              </TooltipPopover>
            </div>
          </StyledComponent>
        </styled.div>
      </div>
    </StyledComponent>
  </styled.div>
</Record>
`;

exports[`<Record /> should render a Record component without children 1`] = `
.c3 {
  font-size: 14px;
  line-height: 20px;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  color: #424F5C;
  font-weight: 400;
}

.c1 {
  font-size: 16px;
  line-height: 24px;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  color: #8FA1B3;
  font-weight: 400;
  display: block;
}

.c2 {
  margin-bottom: 4px;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column-reverse;
  -ms-flex-direction: column-reverse;
  flex-direction: column-reverse;
}

<Record
  name="Position Title"
  noChildrenText="No Position Title"
  variant="labelAbove"
>
  <styled.div
    data-component-type="record"
    variant="labelAbove"
  >
    <StyledComponent
      data-component-type="record"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gqjmRU",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  display: flex;
  ",
              [Function],
              "
  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-gqjmRU",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      variant="labelAbove"
    >
      <div
        className="c0"
        data-component-type="record"
      >
        <div>
          <Text
            color="#8FA1B3"
            isInline={false}
            tag="span"
            type="body"
          >
            <styled.span
              as="span"
              color="#8FA1B3"
              data-component-type="text"
              isInline={false}
              textType="body"
            >
              <StyledComponent
                as="span"
                color="#8FA1B3"
                data-component-type="text"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-dnqmqq",
                      "isStatic": false,
                      "lastClassName": "c3",
                      "rules": Array [
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "
",
                      ],
                    },
                    "displayName": "styled.span",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-dnqmqq",
                    "target": "span",
                    "toString": [Function],
                    "usesTheme": false,
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                isInline={false}
                textType="body"
              >
                <span
                  className="c1"
                  color="#8FA1B3"
                  data-component-type="text"
                >
                  No Position Title
                </span>
              </StyledComponent>
            </styled.span>
          </Text>
        </div>
        <styled.div
          data-component-type="record_name"
          hasTooltip={false}
          variant="labelAbove"
        >
          <StyledComponent
            data-component-type="record_name"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gZMcBi",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  .label-component {
    ",
                    [Function],
                    "
  }

  ",
                    [Function],
                    "
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gZMcBi",
                "target": "div",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            hasTooltip={false}
            variant="labelAbove"
          >
            <div
              className="c2"
              data-component-type="record_name"
            >
              <Text
                className="label-component"
                color="#424F5C"
                isInline={true}
                tag="span"
                type="small"
              >
                <styled.span
                  as="span"
                  className="label-component"
                  color="#424F5C"
                  data-component-type="text"
                  isInline={true}
                  textType="small"
                >
                  <StyledComponent
                    as="span"
                    className="label-component"
                    color="#424F5C"
                    data-component-type="text"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-dnqmqq",
                          "isStatic": false,
                          "lastClassName": "c3",
                          "rules": Array [
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "
",
                          ],
                        },
                        "displayName": "styled.span",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-dnqmqq",
                        "target": "span",
                        "toString": [Function],
                        "usesTheme": false,
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    isInline={true}
                    textType="small"
                  >
                    <span
                      className="c3 label-component"
                      color="#424F5C"
                      data-component-type="text"
                    >
                      Position Title
                    </span>
                  </StyledComponent>
                </styled.span>
              </Text>
            </div>
          </StyledComponent>
        </styled.div>
      </div>
    </StyledComponent>
  </styled.div>
</Record>
`;

exports[`<Record /> should render a Record component, creating a Text child with the provided number 1`] = `
.c1 {
  font-size: 16px;
  line-height: 24px;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  color: #262D33;
  font-weight: 400;
}

.c3 {
  font-size: 14px;
  line-height: 20px;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  color: #424F5C;
  font-weight: 400;
}

.c2 {
  margin-bottom: 4px;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column-reverse;
  -ms-flex-direction: column-reverse;
  flex-direction: column-reverse;
}

<Record
  name="FTE"
  noChildrenText="Not Provided"
  variant="labelAbove"
>
  <styled.div
    data-component-type="record"
    variant="labelAbove"
  >
    <StyledComponent
      data-component-type="record"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gqjmRU",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  display: flex;
  ",
              [Function],
              "
  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-gqjmRU",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      variant="labelAbove"
    >
      <div
        className="c0"
        data-component-type="record"
      >
        <div>
          <Text
            color="#262D33"
            isInline={true}
            key=".0"
            tag="span"
            type="body"
          >
            <styled.span
              as="span"
              color="#262D33"
              data-component-type="text"
              isInline={true}
              textType="body"
            >
              <StyledComponent
                as="span"
                color="#262D33"
                data-component-type="text"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-dnqmqq",
                      "isStatic": false,
                      "lastClassName": "c3",
                      "rules": Array [
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "
",
                      ],
                    },
                    "displayName": "styled.span",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-dnqmqq",
                    "target": "span",
                    "toString": [Function],
                    "usesTheme": false,
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                isInline={true}
                textType="body"
              >
                <span
                  className="c1"
                  color="#262D33"
                  data-component-type="text"
                >
                  1.000
                </span>
              </StyledComponent>
            </styled.span>
          </Text>
        </div>
        <styled.div
          data-component-type="record_name"
          hasTooltip={false}
          variant="labelAbove"
        >
          <StyledComponent
            data-component-type="record_name"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gZMcBi",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  .label-component {
    ",
                    [Function],
                    "
  }

  ",
                    [Function],
                    "
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gZMcBi",
                "target": "div",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            hasTooltip={false}
            variant="labelAbove"
          >
            <div
              className="c2"
              data-component-type="record_name"
            >
              <Text
                className="label-component"
                color="#424F5C"
                isInline={true}
                tag="span"
                type="small"
              >
                <styled.span
                  as="span"
                  className="label-component"
                  color="#424F5C"
                  data-component-type="text"
                  isInline={true}
                  textType="small"
                >
                  <StyledComponent
                    as="span"
                    className="label-component"
                    color="#424F5C"
                    data-component-type="text"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-dnqmqq",
                          "isStatic": false,
                          "lastClassName": "c3",
                          "rules": Array [
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "
",
                          ],
                        },
                        "displayName": "styled.span",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-dnqmqq",
                        "target": "span",
                        "toString": [Function],
                        "usesTheme": false,
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    isInline={true}
                    textType="small"
                  >
                    <span
                      className="c3 label-component"
                      color="#424F5C"
                      data-component-type="text"
                    >
                      FTE
                    </span>
                  </StyledComponent>
                </styled.span>
              </Text>
            </div>
          </StyledComponent>
        </styled.div>
      </div>
    </StyledComponent>
  </styled.div>
</Record>
`;

exports[`<Record /> should render a Record component, creating a Text child with the provided text 1`] = `
.c1 {
  font-size: 16px;
  line-height: 24px;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  color: #262D33;
  font-weight: 400;
}

.c3 {
  font-size: 14px;
  line-height: 20px;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  color: #424F5C;
  font-weight: 400;
}

.c2 {
  margin-bottom: 4px;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column-reverse;
  -ms-flex-direction: column-reverse;
  flex-direction: column-reverse;
}

<Record
  name="Position Title"
  noChildrenText="Not Provided"
  variant="labelAbove"
>
  <styled.div
    data-component-type="record"
    variant="labelAbove"
  >
    <StyledComponent
      data-component-type="record"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gqjmRU",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  display: flex;
  ",
              [Function],
              "
  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-gqjmRU",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      variant="labelAbove"
    >
      <div
        className="c0"
        data-component-type="record"
      >
        <div>
          <Text
            color="#262D33"
            isInline={true}
            key=".0"
            tag="span"
            type="body"
          >
            <styled.span
              as="span"
              color="#262D33"
              data-component-type="text"
              isInline={true}
              textType="body"
            >
              <StyledComponent
                as="span"
                color="#262D33"
                data-component-type="text"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-dnqmqq",
                      "isStatic": false,
                      "lastClassName": "c3",
                      "rules": Array [
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "
",
                      ],
                    },
                    "displayName": "styled.span",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-dnqmqq",
                    "target": "span",
                    "toString": [Function],
                    "usesTheme": false,
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                isInline={true}
                textType="body"
              >
                <span
                  className="c1"
                  color="#262D33"
                  data-component-type="text"
                >
                  Chief Executive Officer
                </span>
              </StyledComponent>
            </styled.span>
          </Text>
        </div>
        <styled.div
          data-component-type="record_name"
          hasTooltip={false}
          variant="labelAbove"
        >
          <StyledComponent
            data-component-type="record_name"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gZMcBi",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  .label-component {
    ",
                    [Function],
                    "
  }

  ",
                    [Function],
                    "
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gZMcBi",
                "target": "div",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            hasTooltip={false}
            variant="labelAbove"
          >
            <div
              className="c2"
              data-component-type="record_name"
            >
              <Text
                className="label-component"
                color="#424F5C"
                isInline={true}
                tag="span"
                type="small"
              >
                <styled.span
                  as="span"
                  className="label-component"
                  color="#424F5C"
                  data-component-type="text"
                  isInline={true}
                  textType="small"
                >
                  <StyledComponent
                    as="span"
                    className="label-component"
                    color="#424F5C"
                    data-component-type="text"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-dnqmqq",
                          "isStatic": false,
                          "lastClassName": "c3",
                          "rules": Array [
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "
",
                          ],
                        },
                        "displayName": "styled.span",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-dnqmqq",
                        "target": "span",
                        "toString": [Function],
                        "usesTheme": false,
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    isInline={true}
                    textType="small"
                  >
                    <span
                      className="c3 label-component"
                      color="#424F5C"
                      data-component-type="text"
                    >
                      Position Title
                    </span>
                  </StyledComponent>
                </styled.span>
              </Text>
            </div>
          </StyledComponent>
        </styled.div>
      </div>
    </StyledComponent>
  </styled.div>
</Record>
`;

exports[`<Record /> should render a Record component, with the provided component child 1`] = `
.c2 {
  font-size: 14px;
  line-height: 20px;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  color: #424F5C;
  font-weight: 400;
}

.c1 {
  margin-bottom: 4px;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column-reverse;
  -ms-flex-direction: column-reverse;
  flex-direction: column-reverse;
}

<Record
  name="Position Title"
  noChildrenText="Not Provided"
  variant="labelAbove"
>
  <styled.div
    data-component-type="record"
    variant="labelAbove"
  >
    <StyledComponent
      data-component-type="record"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gqjmRU",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  display: flex;
  ",
              [Function],
              "
  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-gqjmRU",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      variant="labelAbove"
    >
      <div
        className="c0"
        data-component-type="record"
      >
        <div>
          <p
            key=".0"
          >
            Chief Executive Officer
          </p>
        </div>
        <styled.div
          data-component-type="record_name"
          hasTooltip={false}
          variant="labelAbove"
        >
          <StyledComponent
            data-component-type="record_name"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gZMcBi",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  .label-component {
    ",
                    [Function],
                    "
  }

  ",
                    [Function],
                    "
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gZMcBi",
                "target": "div",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            hasTooltip={false}
            variant="labelAbove"
          >
            <div
              className="c1"
              data-component-type="record_name"
            >
              <Text
                className="label-component"
                color="#424F5C"
                isInline={true}
                tag="span"
                type="small"
              >
                <styled.span
                  as="span"
                  className="label-component"
                  color="#424F5C"
                  data-component-type="text"
                  isInline={true}
                  textType="small"
                >
                  <StyledComponent
                    as="span"
                    className="label-component"
                    color="#424F5C"
                    data-component-type="text"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-dnqmqq",
                          "isStatic": false,
                          "lastClassName": "c2",
                          "rules": Array [
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "
",
                          ],
                        },
                        "displayName": "styled.span",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-dnqmqq",
                        "target": "span",
                        "toString": [Function],
                        "usesTheme": false,
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    isInline={true}
                    textType="small"
                  >
                    <span
                      className="c2 label-component"
                      color="#424F5C"
                      data-component-type="text"
                    >
                      Position Title
                    </span>
                  </StyledComponent>
                </styled.span>
              </Text>
            </div>
          </StyledComponent>
        </styled.div>
      </div>
    </StyledComponent>
  </styled.div>
</Record>
`;

exports[`<Record /> should render a Record with a Tooltip 1`] = `
.c4 {
  display: inline-block;
  font-stretch: normal;
  --fa-primary-color: #2512B3;
  --fa-secondary-color: #2512B3;
  color: #C5CED6;
}

.c4.icon {
  text-align: center;
  font-size: 1rem;
}

.c3 {
  cursor: help;
}

.c2 {
  font-size: 14px;
  line-height: 20px;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  color: #424F5C;
  font-weight: 400;
}

.c1 {
  margin-bottom: 4px;
}

.c1 .label-component {
  padding-right: .25rem;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column-reverse;
  -ms-flex-direction: column-reverse;
  flex-direction: column-reverse;
}

<Record
  name="Position Title"
  noChildrenText="Not Provided"
  tooltipContent="a"
  variant="labelAbove"
>
  <styled.div
    data-component-type="record"
    variant="labelAbove"
  >
    <StyledComponent
      data-component-type="record"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gqjmRU",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  display: flex;
  ",
              [Function],
              "
  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-gqjmRU",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      variant="labelAbove"
    >
      <div
        className="c0"
        data-component-type="record"
      >
        <div>
          <p
            key=".0"
          >
            Chief Executive Officer
          </p>
        </div>
        <styled.div
          data-component-type="record_name"
          hasTooltip={true}
          variant="labelAbove"
        >
          <StyledComponent
            data-component-type="record_name"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gZMcBi",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  .label-component {
    ",
                    [Function],
                    "
  }

  ",
                    [Function],
                    "
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gZMcBi",
                "target": "div",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            hasTooltip={true}
            variant="labelAbove"
          >
            <div
              className="c1"
              data-component-type="record_name"
            >
              <Text
                className="label-component"
                color="#424F5C"
                isInline={true}
                tag="span"
                type="small"
              >
                <styled.span
                  as="span"
                  className="label-component"
                  color="#424F5C"
                  data-component-type="text"
                  isInline={true}
                  textType="small"
                >
                  <StyledComponent
                    as="span"
                    className="label-component"
                    color="#424F5C"
                    data-component-type="text"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-dnqmqq",
                          "isStatic": false,
                          "lastClassName": "c2",
                          "rules": Array [
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "
",
                          ],
                        },
                        "displayName": "styled.span",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-dnqmqq",
                        "target": "span",
                        "toString": [Function],
                        "usesTheme": false,
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    isInline={true}
                    textType="small"
                  >
                    <span
                      className="c2 label-component"
                      color="#424F5C"
                      data-component-type="text"
                    >
                      Position Title
                    </span>
                  </StyledComponent>
                </styled.span>
              </Text>
              <TooltipPopover
                toggleComponent={[Function]}
                variant="neutral"
                width={300}
              >
                <styled.span>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-ifAKCX",
                          "isStatic": false,
                          "lastClassName": "c3",
                          "rules": Array [
                            "
  cursor: ",
                            [Function],
                            ";
",
                          ],
                        },
                        "displayName": "styled.span",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-ifAKCX",
                        "target": "span",
                        "toString": [Function],
                        "usesTheme": false,
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <span
                      className="c3"
                    >
                      <span
                        aria-expanded={false}
                        aria-haspopup={true}
                        className="popoverTrigger"
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        role="button"
                      >
                        <FontAwesomeIcon
                          color="#C5CED6"
                          icon="info-circle"
                          type="solid"
                        >
                          <Icon
                            color="#C5CED6"
                            icon="fas fa-info-circle"
                          >
                            <styled.i
                              aria-hidden={true}
                              className="icon fas fa-info-circle"
                              color="#C5CED6"
                              data-component-type="icon"
                              size="medium"
                            >
                              <StyledComponent
                                aria-hidden={true}
                                className="icon fas fa-info-circle"
                                color="#C5CED6"
                                data-component-type="icon"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-htpNat",
                                      "isStatic": false,
                                      "lastClassName": "c4",
                                      "rules": Array [
                                        "
  display: inline-block;
  font-stretch: normal;
  --fa-primary-color: ",
                                        "#2512B3",
                                        ";
  --fa-secondary-color: ",
                                        "#2512B3",
                                        ";

  ",
                                        [Function],
                                        "

  ",
                                        [Function],
                                        "
  ",
                                        [Function],
                                        "

  ",
                                        [Function],
                                        "

  ",
                                        [Function],
                                        "

  ",
                                        [Function],
                                        "

  ",
                                        [Function],
                                        "

  ",
                                        [Function],
                                        "

  &.icon {
    text-align: center;

  ",
                                        [Function],
                                        "
  }
",
                                      ],
                                    },
                                    "displayName": "styled.i",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-htpNat",
                                    "target": "i",
                                    "toString": [Function],
                                    "usesTheme": false,
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                size="medium"
                              >
                                <i
                                  aria-hidden={true}
                                  className="c4 icon fas fa-info-circle"
                                  color="#C5CED6"
                                  data-component-type="icon"
                                  size="medium"
                                />
                              </StyledComponent>
                            </styled.i>
                          </Icon>
                        </FontAwesomeIcon>
                      </span>
                    </span>
                  </StyledComponent>
                </styled.span>
                <Popover
                  animationType="tooltip"
                  id=""
                  isOpen={false}
                  parentAnchorPosition="auto"
                  parentRef={
                    Object {
                      "current": .c0 {
  display: inline-block;
  font-stretch: normal;
  --fa-primary-color: #2512B3;
  --fa-secondary-color: #2512B3;
  color: #C5CED6;
}

.c0.icon {
  text-align: center;
  font-size: 1rem;
}

<span
                        aria-expanded="false"
                        aria-haspopup="true"
                        class="popoverTrigger"
                        role="button"
                      >
                        <i
                          aria-hidden="true"
                          class="c0 icon fas fa-info-circle"
                          color="#C5CED6"
                          data-component-type="icon"
                        />
                      </span>,
                    }
                  }
                  popoverAnchorPosition="auto"
                >
                  <Portal
                    containerInfo={<body />}
                  >
                    <Transition
                      appear={false}
                      enter={true}
                      exit={true}
                      in={false}
                      mountOnEnter={true}
                      onEnter={[Function]}
                      onEntered={[Function]}
                      onEntering={[Function]}
                      onExit={[Function]}
                      onExited={[Function]}
                      onExiting={[Function]}
                      timeout={200}
                      unmountOnExit={true}
                    />
                  </Portal>
                </Popover>
              </TooltipPopover>
            </div>
          </StyledComponent>
        </styled.div>
      </div>
    </StyledComponent>
  </styled.div>
</Record>
`;

exports[`<Record /> should render a label below Record component 1`] = `
.c1 {
  font-size: 16px;
  line-height: 24px;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  color: #262D33;
  font-weight: 400;
}

.c3 {
  font-size: 14px;
  line-height: 20px;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  color: #424F5C;
  font-weight: 400;
}

.c2 {
  margins: 0px;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

<Record
  name="Position Title"
  noChildrenText="Not Provided"
  variant="labelBelow"
>
  <styled.div
    data-component-type="record"
    variant="labelBelow"
  >
    <StyledComponent
      data-component-type="record"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gqjmRU",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  display: flex;
  ",
              [Function],
              "
  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-gqjmRU",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      variant="labelBelow"
    >
      <div
        className="c0"
        data-component-type="record"
      >
        <div>
          <Text
            color="#262D33"
            isInline={true}
            key=".0"
            tag="span"
            type="body"
          >
            <styled.span
              as="span"
              color="#262D33"
              data-component-type="text"
              isInline={true}
              textType="body"
            >
              <StyledComponent
                as="span"
                color="#262D33"
                data-component-type="text"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-dnqmqq",
                      "isStatic": false,
                      "lastClassName": "c3",
                      "rules": Array [
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "
",
                      ],
                    },
                    "displayName": "styled.span",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-dnqmqq",
                    "target": "span",
                    "toString": [Function],
                    "usesTheme": false,
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                isInline={true}
                textType="body"
              >
                <span
                  className="c1"
                  color="#262D33"
                  data-component-type="text"
                >
                  Chief Executive Officer
                </span>
              </StyledComponent>
            </styled.span>
          </Text>
        </div>
        <styled.div
          data-component-type="record_name"
          hasTooltip={false}
          variant="labelBelow"
        >
          <StyledComponent
            data-component-type="record_name"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gZMcBi",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  .label-component {
    ",
                    [Function],
                    "
  }

  ",
                    [Function],
                    "
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gZMcBi",
                "target": "div",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            hasTooltip={false}
            variant="labelBelow"
          >
            <div
              className="c2"
              data-component-type="record_name"
            >
              <Text
                className="label-component"
                color="#424F5C"
                isInline={true}
                tag="span"
                type="small"
              >
                <styled.span
                  as="span"
                  className="label-component"
                  color="#424F5C"
                  data-component-type="text"
                  isInline={true}
                  textType="small"
                >
                  <StyledComponent
                    as="span"
                    className="label-component"
                    color="#424F5C"
                    data-component-type="text"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-dnqmqq",
                          "isStatic": false,
                          "lastClassName": "c3",
                          "rules": Array [
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "
",
                          ],
                        },
                        "displayName": "styled.span",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-dnqmqq",
                        "target": "span",
                        "toString": [Function],
                        "usesTheme": false,
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    isInline={true}
                    textType="small"
                  >
                    <span
                      className="c3 label-component"
                      color="#424F5C"
                      data-component-type="text"
                    >
                      Position Title
                    </span>
                  </StyledComponent>
                </styled.span>
              </Text>
            </div>
          </StyledComponent>
        </styled.div>
      </div>
    </StyledComponent>
  </styled.div>
</Record>
`;

exports[`<Record /> should render a label right Record component 1`] = `
.c1 {
  font-size: 16px;
  line-height: 24px;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  color: #262D33;
  font-weight: 400;
}

.c3 {
  font-size: 14px;
  line-height: 20px;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  color: #424F5C;
  font-weight: 400;
}

.c2 {
  margin-left: 8px;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
}

<Record
  name="Position Title"
  noChildrenText="Not Provided"
  variant="labelRight"
>
  <styled.div
    data-component-type="record"
    variant="labelRight"
  >
    <StyledComponent
      data-component-type="record"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gqjmRU",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  display: flex;
  ",
              [Function],
              "
  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-gqjmRU",
          "target": "div",
          "toString": [Function],
          "usesTheme": false,
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      variant="labelRight"
    >
      <div
        className="c0"
        data-component-type="record"
      >
        <div>
          <Text
            color="#262D33"
            isInline={true}
            key=".0"
            tag="span"
            type="body"
          >
            <styled.span
              as="span"
              color="#262D33"
              data-component-type="text"
              isInline={true}
              textType="body"
            >
              <StyledComponent
                as="span"
                color="#262D33"
                data-component-type="text"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-dnqmqq",
                      "isStatic": false,
                      "lastClassName": "c3",
                      "rules": Array [
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "
",
                      ],
                    },
                    "displayName": "styled.span",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-dnqmqq",
                    "target": "span",
                    "toString": [Function],
                    "usesTheme": false,
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                isInline={true}
                textType="body"
              >
                <span
                  className="c1"
                  color="#262D33"
                  data-component-type="text"
                >
                  Chief Executive Officer
                </span>
              </StyledComponent>
            </styled.span>
          </Text>
        </div>
        <styled.div
          data-component-type="record_name"
          hasTooltip={false}
          variant="labelRight"
        >
          <StyledComponent
            data-component-type="record_name"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gZMcBi",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  .label-component {
    ",
                    [Function],
                    "
  }

  ",
                    [Function],
                    "
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gZMcBi",
                "target": "div",
                "toString": [Function],
                "usesTheme": false,
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            hasTooltip={false}
            variant="labelRight"
          >
            <div
              className="c2"
              data-component-type="record_name"
            >
              <Text
                className="label-component"
                color="#424F5C"
                isInline={true}
                tag="span"
                type="small"
              >
                <styled.span
                  as="span"
                  className="label-component"
                  color="#424F5C"
                  data-component-type="text"
                  isInline={true}
                  textType="small"
                >
                  <StyledComponent
                    as="span"
                    className="label-component"
                    color="#424F5C"
                    data-component-type="text"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-dnqmqq",
                          "isStatic": false,
                          "lastClassName": "c3",
                          "rules": Array [
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "

  ",
                            [Function],
                            "
",
                          ],
                        },
                        "displayName": "styled.span",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-dnqmqq",
                        "target": "span",
                        "toString": [Function],
                        "usesTheme": false,
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    isInline={true}
                    textType="small"
                  >
                    <span
                      className="c3 label-component"
                      color="#424F5C"
                      data-component-type="text"
                    >
                      Position Title
                    </span>
                  </StyledComponent>
                </styled.span>
              </Text>
            </div>
          </StyledComponent>
        </styled.div>
      </div>
    </StyledComponent>
  </styled.div>
</Record>
`;
